// Date: 28.09.2016 16:16:17
// Template version 1.1
// Java generated by Techne
package pokefenn.totemic.client.rendering.model;

import net.minecraft.client.model.ModelBiped;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.Entity;
import net.minecraft.util.EnumHandSide;
import net.minecraft.util.math.MathHelper;

// This must extend ModelBiped, else LayerHeldItem does not work
// TODO: Make proper use of ModelBiped
public class ModelBaykok extends ModelBiped
{
    private ModelRenderer head;
    private ModelRenderer headdress1;
    private ModelRenderer headdress2;
    private ModelRenderer headdress3;
    private ModelRenderer headdress4;
    private ModelRenderer headdress5;
    private ModelRenderer ribs;
    private ModelRenderer quiver;
    private ModelRenderer leftarm;
    private ModelRenderer rightarm;
    private ModelRenderer spine;
    private ModelRenderer pelvis;
    private ModelRenderer leftleg;
    private ModelRenderer rightleg;

    public ModelBaykok()
    {
        rightArmPose = ModelBiped.ArmPose.BOW_AND_ARROW;

        textureWidth = 64;
        textureHeight = 64;

        head = new ModelRenderer(this, 0, 0);
        head.addBox(-4F, -9F, -4F, 8, 8, 8);
        head.setRotationPoint(0F, 0F, 0F);
        head.setTextureSize(64, 64);
        head.mirror = true;
        setRotation(head, 0F, 0F, 0F);
        headdress1 = new ModelRenderer(this, 32, 0);
        headdress1.addBox(-0.5F, -14F, -1F, 2, 6, 2);
        headdress1.setRotationPoint(0F, 0F, 0F);
        headdress1.setTextureSize(64, 64);
        headdress1.mirror = true;
        setRotation(headdress1, -0.1745329F, 0F, -0.4712389F);
        head.addChild(headdress1);
        headdress2 = new ModelRenderer(this, 32, 0);
        headdress2.addBox(-1F, -14F, -1F, 2, 6, 2);
        headdress2.setRotationPoint(0F, 0F, 0F);
        headdress2.setTextureSize(64, 64);
        headdress2.mirror = true;
        setRotation(headdress2, -0.1745329F, 0F, -0.2268928F);
        head.addChild(headdress2);
        headdress3 = new ModelRenderer(this, 32, 0);
        headdress3.addBox(-1F, -14F, -1F, 2, 6, 2);
        headdress3.setRotationPoint(0F, 0F, 0F);
        headdress3.setTextureSize(64, 64);
        headdress3.mirror = true;
        setRotation(headdress3, -0.1745329F, 0F, 0F);
        head.addChild(headdress3);
        headdress4 = new ModelRenderer(this, 32, 0);
        headdress4.addBox(-1F, -14F, -1F, 2, 6, 2);
        headdress4.setRotationPoint(0F, 0F, 0F);
        headdress4.setTextureSize(64, 64);
        headdress4.mirror = true;
        setRotation(headdress4, -0.1745329F, 0F, 0.2268928F);
        head.addChild(headdress4);
        headdress5 = new ModelRenderer(this, 32, 0);
        headdress5.addBox(-1.5F, -14F, -1F, 2, 6, 2);
        headdress5.setRotationPoint(0F, 0F, 0F);
        headdress5.setTextureSize(64, 64);
        headdress5.mirror = true;
        setRotation(headdress5, -0.1745329F, 0F, 0.4712389F);
        head.addChild(headdress5);
        ribs = new ModelRenderer(this, 0, 16);
        ribs.addBox(-3F, -1F, -2F, 6, 8, 4);
        ribs.setRotationPoint(0F, 0F, 0F);
        ribs.setTextureSize(64, 64);
        ribs.mirror = true;
        setRotation(ribs, 0F, 0F, 0F);
        quiver = new ModelRenderer(this, 24, 20);
        quiver.addBox(-5F, -2F, 2F, 4, 11, 2);
        quiver.setRotationPoint(0F, 0F, 0F);
        quiver.setTextureSize(64, 64);
        quiver.mirror = true;
        setRotation(quiver, 0F, 0F, -0.5235988F);
        leftarm = new ModelRenderer(this, 42, 0);
        leftarm.addBox(-2F, -11F, -0.5F, 3, 13, 3);
        leftarm.setRotationPoint(5F, 2F, 0F);
        leftarm.setTextureSize(64, 64);
        leftarm.mirror = true;
        setRotation(leftarm, 1.570796F, 0F, 0F);
        rightarm = new ModelRenderer(this, 42, 0);
        rightarm.addBox(-1F, -11F, -0.5F, 3, 13, 3);
        rightarm.setRotationPoint(-5F, 2F, 0F);
        rightarm.setTextureSize(64, 64);
        rightarm.mirror = true;
        setRotation(rightarm, 1.570796F, 0F, 0F);
        spine = new ModelRenderer(this, 0, 28);
        spine.addBox(-1.5F, 7F, -2F, 3, 5, 4);
        spine.setRotationPoint(0F, 0F, 0F);
        spine.setTextureSize(64, 64);
        spine.mirror = true;
        setRotation(spine, 0F, 0F, 0F);
        pelvis = new ModelRenderer(this, 0, 37);
        pelvis.addBox(-4F, 11F, -2F, 8, 1, 4);
        pelvis.setRotationPoint(0F, 0F, 0F);
        pelvis.setTextureSize(64, 64);
        pelvis.mirror = true;
        setRotation(pelvis, 0F, 0F, 0F);
        leftleg = new ModelRenderer(this, 42, 16);
        leftleg.addBox(-1F, 0F, -1.5F, 3, 12, 3);
        leftleg.setRotationPoint(2F, 12F, 0F);
        leftleg.setTextureSize(64, 64);
        leftleg.mirror = true;
        setRotation(leftleg, 0F, 0F, 0F);
        rightleg = new ModelRenderer(this, 42, 16);
        rightleg.addBox(-2F, 0F, -1.5F, 3, 12, 3);
        rightleg.setRotationPoint(-2F, 12F, 0F);
        rightleg.setTextureSize(64, 64);
        rightleg.mirror = true;
        setRotation(rightleg, 0F, 0F, 0F);
    }
    @Override
    public void render(Entity entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale)
    {
        setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale, entity);
        head.render(scale);
        ribs.render(scale);
        quiver.render(scale);
        leftarm.render(scale);
        rightarm.render(scale);
        spine.render(scale);
        pelvis.render(scale);
        leftleg.render(scale);
        rightleg.render(scale);
    }

    @Override
    public void setRotationAngles(float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch, float scale, Entity entity)
    {
        super.setRotationAngles(limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch, scale, entity);

        head.rotateAngleX = headPitch / (180F / (float)Math.PI);
        head.rotateAngleY = netHeadYaw / (180F / (float)Math.PI);

        leftarm.rotateAngleX = ((float)Math.PI / 2F);
        leftarm.rotateAngleY = 0.35F;

        rightarm.rotateAngleX = ((float)Math.PI / 2F);
        rightarm.rotateAngleY = -0.1F;

        leftleg.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F) * 1.4F * limbSwingAmount;
        leftleg.rotateAngleY = 0.0F;

        rightleg.rotateAngleX = MathHelper.cos(limbSwing * 0.6662F + (float)Math.PI) * 1.4F * limbSwingAmount;
        rightleg.rotateAngleY = 0.0F;
    }

    @Override
    public void postRenderArm(float scale, EnumHandSide side)
    {
        if(side == EnumHandSide.RIGHT)
        {
            rightarm.postRender(scale);
            GlStateManager.translate(0.04F, -0.03F, 0.04F);
            GlStateManager.rotate(180, 1, 0, 0);
        }
        else
            super.postRenderArm(scale, side);
    }

    private void setRotation(ModelRenderer model, float x, float y, float z)
    {
        model.rotateAngleX = x;
        model.rotateAngleY = y;
        model.rotateAngleZ = z;
    }
}
